@inject AppStateService _appStateService;
@inherits LayoutComponentBase

<CascadingValue Value="this">
    <MudThemeProvider Theme="MyCustomTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Fixed="false" Elevation="1">
            <MudText Typo="Typo.h5" Class="ml-3">Planning Poker</MudText>
            <MudSpacer />
            <MudMenu FullWidth="true">
                <ActivatorContent>
                    <MudChip Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">@_appStateService.CurrentUser?.Name</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>Change Name</MudMenuItem>
                    <MudMenuItem>Change Role</MudMenuItem>
                </ChildContent>
            </MudMenu>
            @*<MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />*@
        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

                @Body
            </MudContainer>
            <footer>
                <MudSpacer />  <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" /><MudLink Href="https://github.com/jbridenthal/PokerPlanning" Target="_blank" Color="Color.Dark">https://github.com/jbridenthal/PokerPlanning</MudLink>
            </footer>
        </MudMainContent>
    </MudLayout>

</CascadingValue>
@code {
    private User? _currentUser;
    public User? CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _appStateService.OnChange += StateHasChanged;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Primary = Colors.Blue.Darken3,
                Secondary = Colors.Green.Darken3,
                AppbarBackground = Colors.BlueGrey.Lighten1,
                AppbarText = Colors.Grey.Darken3,
                Tertiary = Colors.BlueGrey.Lighten1
            }
        };

    public void Dispose()
    {
        _appStateService.OnChange += StateHasChanged;
    }
}
