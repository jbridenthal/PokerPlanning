@page "/"
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IHubService _hubService
@implements IAsyncDisposable


<PageTitle>Poker Planning</PageTitle>

@if (!IsConnected)
{
    <MudGrid>
        <MudItem xl=4></MudItem>
        <MudItem xl="4">
            <Username @bind-UserName="@userName" @bind-SelectedRole="@role" OnConnectCallBack="Connect" />
        </MudItem>
        <MudItem xl=4></MudItem>
    </MudGrid>
}
else
{
    <MudGrid  Class="d-flex justify-center flex-grow-1 gap-4">
        @*<MudItem xl="2"> <RoomsList Rooms=@Rooms OnJoinRoomClick="@HandleJoinRoomClick" CurrentRoom="@GetConnectedRoom()"></RoomsList></MudItem>*@
        <MudItem xl="4">
            <MudText Typo="Typo.h4">Voting</MudText>
            <MudGrid>
                @foreach (var size in sizeValues)
                {
                    <MudItem xs="3">
                        <MudButton Disabled="GetVoteDisable()" Variant="GetVoteColor(size.ToString())" Color="Color.Primary" Size="Size.Large" OnClick="() => HandleVoting(size.ToString())"> @size </MudButton>
                    </MudItem>
                }
                <MudItem xs="3">
                    <MudButton Disabled="GetVoteDisable()" Variant="GetVoteColor('?'.ToString())" Color="Color.Primary" Size="Size.Large" OnClick="() => HandleVoting('?'.ToString())"> ? </MudButton>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="9">
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" EndIcon="@Icons.Filled.Person" OnClick="()=> showVotes = true" Disabled="@PersonalShowDisabled()"> <MudText>Show votes for only me</MudText> </MudButton>
                </MudItem>
                <MudItem xs="9">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" EndIcon="@Icons.Filled.People" OnClick="()=> HandleShowVotes()" Disabled="@ModeratorOnly()"> <MudText>Show votes for everyone</MudText></MudButton>
                </MudItem>
                <MudItem xs="9">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" OnClick="()=> HandleClearVotes()" Disabled="@ModeratorOnly()"> <MudText>Clear votes for everyone</MudText></MudButton>
                </MudItem>
            </MudGrid>
            @if (ModeratorOnly())
            {
                <MudText Color="Color.Error">Only moderators can show or clear votes for everyone at this time</MudText>
            }
        </MudItem>
        <MudItem xl="4">
            <UsersList Users=@Users ShowVotes="@showVotes" Room="@GetConnectedRoom()"></UsersList>
        </MudItem>
    </MudGrid>
}

@code {
    const string LOCAL_STORAGE_NAME = "PokerPlanning.UserInfo";
    private string userName { get; set; } = string.Empty;
    private string userId = string.Empty;
    private int[] sizeValues = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
    private Role role = Role.Observer;
    private Dictionary<string, User> Users = new Dictionary<string, User>();
    private bool showVotes = false;
    private static Dictionary<string, List<string>> Rooms = new Dictionary<string, List<string>>();
    private User currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        _hubService.OnChange += StateHasChanged;
        _hubService.OnUsersUpdated += UsersUpdated;
        _hubService.OnShowVotes += ShowVotesUpdated;
        _hubService.OnClearVotes += ClearVotesUpdated;
        _hubService.OnUserIDUpdated += UserIDUpdated;
        _hubService.OnUserLogOut += UserLogout;
                    
        currentUser = await localStorage.GetItemAsync<User>(LOCAL_STORAGE_NAME);
        if (currentUser != null && !string.IsNullOrWhiteSpace(currentUser.Name))
        {
            userName = currentUser.Name;
            role = currentUser.Role;
            StateHasChanged();
            await Connect();
        }
    }
    async void UserLogout(object sender)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void UserIDUpdated(object sender, string id)
    {
        userId = id;
    }

    private void UsersUpdated(object sender, Dictionary<string, User> hubUsers)
    {
        Users = hubUsers;
    }

    private void ShowVotesUpdated(object sender)
    {
        showVotes = true;
    }

    private void ClearVotesUpdated(object sender)
    {
        showVotes = false;
    }

    private async Task Connect()
    {
        await _hubService.Connect(userName, role);
    }

    private async Task HandleVoting(string vote)
    {
        await _hubService.SendVote(vote);
    }

    private async Task HandleClearVotes()
    {
        await _hubService.ClearVotes();
        showVotes = false;
    }

    private async Task HandleShowVotes()
    {
        await _hubService.ShowVotes();
    }

    private async Task HandleJoinRoomClick(string room)
    {
        await _hubService.JoinRoom(room);
    }

    private Variant GetVoteColor(string vote)
    {
        var user = Users.Values.Where(x => x.Name != null && x.Name.Equals(userName)).FirstOrDefault();
        return user != null && user.Vote != null && user.Vote.Equals(vote) ? Variant.Filled : Variant.Outlined;
    }

    private bool GetVoteDisable()
    {
        var user = Users.Values.Where(x => x.Name != null && x.Name.Equals(userName)).FirstOrDefault();
        if (user != null && (user.Role == Role.Observer || user.Role == Role.Moderator))
        {
            return true;
        }

        if (showVotes)
        {
            return true;
        }

        return false;
    }

    private bool PersonalShowDisabled()
    {
        if (Users != null && Users.ContainsKey(userId))
        {
            if (Users[userId].Role == Role.Observer || Users[userId].Role == Role.Moderator)

            {
                return false;
            }
            return string.IsNullOrWhiteSpace(Users[userId].Vote);
        }
        return true;
    }

    private bool IsConnectDisabled => string.IsNullOrEmpty(userName) || string.IsNullOrWhiteSpace(userName);

    private bool IsConnected => _hubService.IsConnected;

    private string GetConnectedRoom()
    {
        if (Users != null && Users.ContainsKey(userId))
        {
            return Users[userId].Room ?? "Lobby";
        }
        return "Lobby";
    }

    private bool ShowUsers()
    {
        if (Users.Keys.Count() >= 0 && Users.ContainsKey(userId) && Users[userId].Room != "Lobby")
        {
            return true;
        }
        return false;
    }

    private bool ModeratorOnly()
    {
        if (Users.Values.Any(x => x.Role == Role.Moderator))
        {
            if (role != Role.Moderator)
            {
                return true;
            }
        }
        return false;
    }


    public async ValueTask DisposeAsync()
    {
        await _hubService.Dispose();
    }
}
