@page "/"
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar
@implements IAsyncDisposable


<PageTitle>Poker Planning</PageTitle>

@if (!IsConnected)
{
    <MudGrid>
        <MudItem xl=4></MudItem>
        <MudItem xl="4">
            <Username @bind-UserName="@userName" @bind-SelectedRole="@role" OnConnectCallBack="Connect" />
        </MudItem>
        <MudItem xl=4></MudItem>
    </MudGrid>
}
else
{
    <MudGrid>
        <MudItem xl="2"> <RoomsList Rooms=@Rooms OnJoinRoomClick="@HandleJoinRoomClick" CurrentRoom="@GetConnectedRoom()"></RoomsList></MudItem>
        <MudItem xl="4">
           <MudText Typo="Typo.h4">Voting</MudText>
            <MudGrid>
                @foreach (var size in sizeValues)
                {
                    <MudItem xs="3">
                        <MudButton Disabled="GetVoteDisable()" Variant="GetVoteColor(size.ToString())" Color="Color.Primary" Size="Size.Large" OnClick="() => HandleVoting(size.ToString())"> @size </MudButton>
                    </MudItem>
                }
                <MudItem xs="3">
                    <MudButton Disabled="GetVoteDisable()" Variant="GetVoteColor('?'.ToString())" Color="Color.Primary" Size="Size.Large" OnClick="() => HandleVoting('?'.ToString())"> ? </MudButton>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="()=> HandleShowVotes()"> Show Votes </MudButton>
                </MudItem>
                <MudItem xs="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" OnClick="()=> HandleClearVotes()"> Clear Votes </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xl="4"><UsersList Users=@Users ShowVotes="@showVotes" Room="@GetConnectedRoom()"></UsersList></MudItem>
    </MudGrid>
}

@code {
    private HubConnection? hubConnection;
    private string userName { get; set; } = string.Empty;
    private string message = string.Empty;
    private string userId = string.Empty;
    private int[] sizeValues = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
    private Role role = Role.Observer;
    private Dictionary<string, User> Users = new Dictionary<string, User>();
    private bool showVotes = false;
    private static Dictionary<string, List<string>> Rooms = new Dictionary<string, List<string>>();

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/pokerhub?username={userName}&role={role}"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string>("RecieveUserId", (connectionId) =>
       {
           userId = connectionId;
           StateHasChanged();
       });

        hubConnection.On<Dictionary<string, User>>("RecieveUsers", (users) =>
        {
            Users = users;
            StateHasChanged();
        });


        hubConnection.On("ShowVotes", () =>
        {
            showVotes = true;
            StateHasChanged();
        });


        hubConnection.On<Dictionary<string, List<string>>>("RecieveRooms", (rooms) =>
        {
            Rooms = rooms;
            StateHasChanged();
        });


        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
        }
    }



    private async Task HandleVoting(string vote)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendVote", vote);
            StateHasChanged();
        }
    }

    private async Task HandleClearVotes()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("ClearVotes");
            showVotes = false;
            StateHasChanged();
        }
    }

    private async Task HandleShowVotes()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("ShowVotes");
            StateHasChanged();
        }
    }

    private async Task HandleJoinRoomClick(string room)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("JoinRoom", room);
            StateHasChanged();
        }
    }

    public Variant GetVoteColor(string vote)
    {
        var user = Users.Values.Where(x => x.Name != null && x.Name.Equals(userName)).FirstOrDefault();
        return user != null && user.Vote != null && user.Vote.Equals(vote) ? Variant.Filled : Variant.Outlined;
    }

    public bool GetVoteDisable()
    {
        var user = Users.Values.Where(x => x.Name != null && x.Name.Equals(userName)).FirstOrDefault();
        if (user != null && user.Role == Role.Observer)
        {
            return true;
        }

        if (showVotes)
        {
            return true;
        }

        return false;
    }


    public bool IsConnectDisabled => string.IsNullOrEmpty(userName) || string.IsNullOrWhiteSpace(userName);

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public string GetConnectedRoom()
    {
        return Users.ContainsKey(userId) && Users[userId].Room != null ? Users[userId].Room : "Lobby";
    }

    public bool ShowUsers()
    {
        if (Users.Keys.Count() >= 0 && Users.ContainsKey(userId) && Users[userId].Room != "Lobby")
        {
            return true;
        }
        return false;
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}