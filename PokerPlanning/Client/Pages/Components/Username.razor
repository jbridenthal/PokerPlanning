<div class="input-group">
    <MudGrid>
        <MudItem xs="8">
            <MudTextField @bind-Value="UserNameSelection" Required="true" RequiredError="Name is required!" Label="Name" Variant="Variant.Text" Clearable="true"></MudTextField>
        </MudItem>
        <MudItem xs="8">
            <MudSelect style="width:15rem" @bind-Value="SelectedRoleSelection" Label="Role" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (Role item in Enum.GetValues(typeof(Role)))
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(()=>OnConnectCallBack.InvokeAsync())" Disabled="IsConnectDisabled"><MudText>Connect</MudText></MudButton>
        </MudItem>
    </MudGrid>
</div>

@code {
    [Parameter]
    public EventCallback OnConnectCallBack { get; set; }

    [Parameter]
    public string UserName { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> UserNameChanged { get; set; }

    [Parameter]
    public Role SelectedRole { get; set; }

    [Parameter]
    public EventCallback<Role> SelectedRoleChanged { get; set; }

    private string UserNameSelection
    {
        get => UserName ?? string.Empty;
        set => UserNameChanged.InvokeAsync(value);
    }

    private Role SelectedRoleSelection
    {
        get => SelectedRole;
        set => SelectedRoleChanged.InvokeAsync(value);
    }

    public bool IsConnectDisabled => string.IsNullOrEmpty(UserName) || string.IsNullOrWhiteSpace(UserName);
}
