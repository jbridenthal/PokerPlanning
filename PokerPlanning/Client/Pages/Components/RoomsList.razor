@inject IDialogService _dialogService
@inject HubService _hubService

<MudGrid Justify="Justify.Center" Class="d-inline-flex pt-2">
    <MudItem xs="10">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" EndIcon="@Icons.Filled.AddCircle" FullWidth="true" OnClick="@(() => CreateRoom())">Create Room</MudButton>
    </MudItem>
    @foreach (var room in Rooms.Keys)
    {
        <MudItem xs="10">
            @*MudBadge has bug stopping button from being full width*@
            @*<MudBadge Style="display:inherit" Content="@Rooms[room].Count()" Color="Color.Info" FullWidth="true" Overlap="true" Bordered="true">*@
            <MudButton  Class="d-inline-flex" Variant="@GetConnectedRoomVariant(room)" Color="Color.Primary" FullWidth="true" OnClick="@(() => JoinRoom(room))">
                @GetRoomButtonTitle(room)
            </MudButton>
            @* </MudBadge>*@
        </MudItem>
    }
</MudGrid>
@code {
    const string LOBBY = "Lobby";

    private Dictionary<string, List<string>> Rooms { get; set; } = new Dictionary<string, List<string>>();

    private string CurrentRoom { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        _hubService.OnChange += StateHasChanged;
        _hubService.OnRoomsUpdated += RoomsUpdated;
        await Task.CompletedTask;
    }


    async Task CreateRoom()
    {
        var dialog = _dialogService.Show<CreateRoomDialog>();
        var result = await dialog.Result;

        if (!result.Cancelled && !string.IsNullOrWhiteSpace(result.Data.ToString()))
        {
            await _hubService.JoinRoom(result.Data.ToString() ?? LOBBY);
        }
    }

    async Task JoinRoom(string room)
    {
        await _hubService.JoinRoom(room);
    }

    private void RoomsUpdated(object sender, Dictionary<string, List<string>> rooms)
    {
        Rooms = rooms;
        CurrentRoom = GetConnectedRoom();
    }

    private Variant GetConnectedRoomVariant(string room)
    {
        return room == CurrentRoom ? Variant.Filled : Variant.Outlined;
    }

    private string GetRoomButtonTitle(string room)
    {
        return room == CurrentRoom ? $"Currently in {room}" : $"Join {room} : Users {Rooms[room].Count()}";
    }

    private string GetConnectedRoom()
    {
        if (Rooms != null)
        {
            foreach(var room in Rooms)
            {
                if(room.Value.Contains(_hubService.CurrentUser.ID ?? string.Empty))
                {
                    return room.Key;
                }
            }
        }
        return "Lobby";
    }
}
